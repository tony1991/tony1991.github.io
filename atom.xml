<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Tony's blog]]></title>
  <subtitle><![CDATA[梦想还是要有的，万一实现了呢？]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-04-07T13:16:33.285Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[tony]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[python学习笔记(二)]]></title>
    <link href="http://yoursite.com/2015/04/06/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://yoursite.com/2015/04/06/python学习笔记-二/</id>
    <published>2015-04-06T02:35:08.000Z</published>
    <updated>2015-04-07T13:16:33.285Z</updated>
    <content type="html"><![CDATA[<p>上次学到了函数，这次就讲一个具体的函数—读写文件，然后再谈谈网络编程中的Socket。最后结合上面两个知识点，我写了几个读写邮件的小程序。</p>
<h2 id="文件操作">文件操作</h2><p>python的文件操作，主要有内置的<code>open()</code>，<code>read()</code>，<code>readlines()</code>等等，其中<code>open()</code>函数有几个可配置参数，表示文件打开的模式。如：open(路径+文件名，读入模式，缓存区)，后面两项可选，其中读入模式有以下配置项(可叠加使用)：<a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r 只读(默认)，</span><br><span class="line">w 写入(会覆盖原有文件)，</span><br><span class="line">x 新建并写入，</span><br><span class="line">a 追加内容，</span><br><span class="line">b 二进制模式，</span><br><span class="line">t 文本模式，</span><br><span class="line">+ 读写文件，</span><br></pre></td></tr></table></figure></p>
<p>其他的不说了，直接上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 查看当前目录的绝对路径:</span></span><br><span class="line">print(os.path.abspath(<span class="string">'.'</span>))</span><br><span class="line"></span><br><span class="line">testFileName = <span class="string">"D://python//FileDemo.py"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件,并写入相关内容</span></span><br><span class="line">f=open(testFileName,mode=<span class="string">"w"</span>,encoding=<span class="string">"UTF-8"</span>)</span><br><span class="line">f.write(<span class="string">'Hello, world!'</span>+<span class="string">"\n"</span>)</span><br><span class="line">f.write(<span class="string">'Python!'</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个文件</span></span><br><span class="line"><span class="comment"># os.remove(fileName)</span></span><br><span class="line"></span><br><span class="line">f = open(testFileName)</span><br><span class="line">print(f.read())</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个目录:</span></span><br><span class="line">os.mkdir(<span class="string">'D://python//testdir'</span>)</span><br><span class="line"><span class="comment"># 删掉一个目录:</span></span><br><span class="line">os.rmdir(<span class="string">'D://python//testdir'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读文件函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">(fileName)</span>:</span></span><br><span class="line">    f=open(fileName,encoding=<span class="string">"UTF-8"</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        print(line.strip())</span><br><span class="line">    <span class="string">'''</span><br><span class="line">    while 1:</span><br><span class="line">        lines=f.readlines();</span><br><span class="line">        if not lines:</span><br><span class="line">          #print("end")</span><br><span class="line">            break;</span><br><span class="line">        for line in lines:</span><br><span class="line">            print(line.strip())</span><br><span class="line">    '''</span></span><br><span class="line">    f.close()</span><br><span class="line">    </span><br><span class="line">readFile(testFileName)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写文件函数</span></span><br><span class="line">content = <span class="string">"文件内容"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeFile</span><span class="params">(content,fileName)</span>:</span></span><br><span class="line">    <span class="comment">#a追加模式w覆盖模式</span></span><br><span class="line">    f = open(fileName,mode=<span class="string">'a'</span>,encoding=<span class="string">"UTF-8"</span>)</span><br><span class="line">    f.write(content+<span class="string">"\n"</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    print(<span class="string">"写入成功!"</span>)</span><br><span class="line"></span><br><span class="line">writeFile(content,testFileName)</span><br><span class="line">readFile(testFileName)</span><br></pre></td></tr></table></figure></p>
<h2 id="Socket">Socket</h2><p>python的网络编程和java的差不多，其中socket编程更是极为相似。<br>服务器端绑定一个端口并监听来自客户端的连接。如果某个客户端连接过来了，服务器就与该客户端建立Socket连接，随后的通信就靠这个Socket连接了。<br>客户端主动向对应的服务器的IP地址和端口号发起TCP连接，如果连接成立，则开始通信。当然这个过程就涉及到TCP/IP的三次握手协议，代码里没有涉及，但是我相信大家肯定都知道。我相信学过java的人肯定能很快地学会Socket，写个“类QQ”应该不成问题吧，嘿嘿~直接上代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">9999</span></span><br><span class="line">BUFSIZE = <span class="number">1024</span></span><br><span class="line"><span class="comment"># 建立连接:</span></span><br><span class="line">tcpCliSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpCliSock.connect((HOST, PORT))</span><br><span class="line"><span class="comment"># 接收欢迎消息:</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    data = input(<span class="string">'&gt; '</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    tcpCliSock.send(data.encode())</span><br><span class="line">    data = tcpCliSock.recv(BUFSIZE).decode()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(data)</span><br><span class="line">tcpCliSock.close()</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器端</span></span><br><span class="line">BUFSIZE = <span class="number">1024</span></span><br><span class="line">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="comment"># 监听端口:</span></span><br><span class="line">tcpSerSock.bind((HOST, PORT))</span><br><span class="line">tcpSerSock.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">'waiting for connection...'</span>)</span><br><span class="line">    tcpCliSock, addr = tcpSerSock.accept()</span><br><span class="line">    print(<span class="string">'...connected from:'</span>, addr)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = tcpCliSock.recv(BUFSIZE).decode()</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">'exit'</span> <span class="keyword">or</span> <span class="keyword">not</span> data:</span><br><span class="line">            print(<span class="string">'exit!'</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">        print(<span class="string">'data:'</span>, data)</span><br><span class="line">        tcpCliSock.send((<span class="string">'[%s] %s'</span> % (ctime(),data)).encode())</span><br><span class="line"></span><br><span class="line">tcpCliSock.close()</span><br></pre></td></tr></table></figure>
<p>测试效果图：<br><img src="/img/socket.png" alt="Socket示例"></p>
<h2 id="发送邮件">发送邮件</h2><p>SMTP是发送邮件的协议,Python内置对SMTP的支持有smtplib和email两个模块，email负责构造邮件，smtplib负责发送邮件。<br>下面是我学习时写的一个发送邮件的小程序，用户名和密码我屏蔽了，想要用的同学可以代入自己的账号。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.base <span class="keyword">import</span> MIMEBase</span><br><span class="line"><span class="keyword">from</span> email <span class="keyword">import</span> encoders</span><br><span class="line"></span><br><span class="line">fromAddr = <span class="string">""</span> <span class="comment"># 这里用自己的邮箱</span></span><br><span class="line">password = <span class="string">""</span> <span class="comment"># 这里用自己的密码</span></span><br><span class="line">toAddr = <span class="string">""</span>   <span class="comment"># 这里写收件邮箱</span></span><br><span class="line">subject = <span class="string">"测试Python发送邮件"</span></span><br><span class="line">smtpServer = <span class="string">"smtp.163.com"</span></span><br><span class="line">content = <span class="string">"你好，这是测试邮件"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendEmail</span><span class="params">(fromAddr,password,toAddr,smtpServer,subject,content,fileName=<span class="string">''</span>)</span>:</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">#---正文部分--- </span></span><br><span class="line">    <span class="comment"># 构造MIMEText对象时，第一个参数就是邮件正文，第二个参数是MIME的subtype，传入'plain'，最终的MIME就是'text/plain'，</span></span><br><span class="line">    <span class="comment"># 最后最好要用utf-8编码保证多语言兼容性</span></span><br><span class="line">    msg = MIMEMultipart()</span><br><span class="line">    text = MIMEText(content,<span class="string">'plain'</span>,<span class="string">'utf-8'</span>)</span><br><span class="line">    msg[<span class="string">'From'</span>] = fromAddr</span><br><span class="line">    msg[<span class="string">'To'</span>] = toAddr</span><br><span class="line">    msg[<span class="string">'Subject'</span>] = Header(subject,<span class="string">'utf-8'</span>)</span><br><span class="line">    msg.attach(text)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#---附件部分---  </span></span><br><span class="line">    <span class="keyword">if</span> fileName.strip()!=<span class="string">''</span> :</span><br><span class="line">        print(<span class="string">"附件不为空"</span>)</span><br><span class="line">        att = MIMEBase(<span class="string">'application'</span>, <span class="string">'octet-stream'</span>)</span><br><span class="line">        att.set_payload(open(fileName, <span class="string">'rb'</span>).read())</span><br><span class="line">        att.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=(<span class="string">'gbk'</span>,<span class="string">''</span>,fileName))</span><br><span class="line">        encoders.encode_base64(att)</span><br><span class="line">        msg.attach(att)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"附件为空"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#---发送邮件---  </span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        server = smtplib.SMTP()  </span><br><span class="line">        server.connect(smtpServer,<span class="string">'25'</span>)    <span class="comment"># SMTP协议默认端口是25</span></span><br><span class="line">		</span><br><span class="line">	<span class="comment"># 如果要发送基于SSL的邮件，则将上面两行改成下面的</span></span><br><span class="line">        <span class="comment"># server = smtplib.SMTP(smtpServer,'25')  # 不要用connect,不然会报错(参考自stackoverflow)</span></span><br><span class="line">        <span class="comment"># server.ehlo()</span></span><br><span class="line">        <span class="comment"># server.starttls()</span></span><br><span class="line"></span><br><span class="line">        server.set_debuglevel(<span class="number">1</span>)           <span class="comment"># 打印出和SMTP服务器交互的所有信息</span></span><br><span class="line">        server.login(fromAddr,password)</span><br><span class="line">        server.sendmail(fromAddr,toAddr,msg.as_string())</span><br><span class="line">        server.quit()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(str(e))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">flag = sendEmail(fromAddr,password,toAddr,smtpServer,subject,content)</span><br><span class="line">print(flag)</span><br><span class="line">fileName = <span class="string">'D://python//导出模板.xls'</span></span><br><span class="line">flag = sendEmail(fromAddr,password,toAddr,smtpServer,subject,content,fileName)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>
<p>进入邮箱，收到邮件了哟。<br>关于读取邮件，主要过程就是:登陆邮箱-&gt;进入收件箱（如”INBOX””DRAFT””ALL”等）-&gt;选择相关邮件-&gt;获取邮件内容（主要是解析）。<strong>注意</strong>：由于国内各大邮件服务商的邮箱安全性的原因，需要进入邮箱设置开启POP/IMAP服务，然后还要接受他的安全性提醒，防止被屏蔽不让读等等。。<br>这里就不贴代码了，个人感觉实用性不是很大，有兴趣的朋友可以自己写写，可以参考 <a href="http://www.cnblogs.com/yhlx/archive/2013/03/22/2975817.html" target="_blank" rel="external">http://www.cnblogs.com/yhlx/archive/2013/03/22/2975817.html</a><br>今天就写记录到这吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上次学到了函数，这次就讲一个具体的函数—读写文件，然后再谈谈网络编程中的Socket。最后结合上面两个知识点，我写了几个读写邮件的小程序。</p>
<h2 id="文件操作">文件操作</h2><p>python的文件操作，主要有内置的<code>open()</code>，<code>read()</code>，<code>readlines()</code>等等，其中<code>open()</code>函数有几个可配置参数，表示文件打开的模式。如：open(路径+文件名，读入模式，缓存区)，后面两项可选，其中读入模式有以下配置项(可叠加使用)：]]>
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="socket" scheme="http://yoursite.com/tags/socket/"/>
    
      <category term="发送邮件" scheme="http://yoursite.com/tags/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python学习笔记（一）]]></title>
    <link href="http://yoursite.com/2015/03/26/python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2015/03/26/python基础总结/</id>
    <published>2015-03-26T11:35:46.000Z</published>
    <updated>2015-04-03T02:27:30.648Z</updated>
    <content type="html"><![CDATA[<h2 id="导语：">导语：</h2><blockquote>
<p>早就听说python的大名了，汗颜的是最近才开始学。囫囵吞枣似的看了下python，看的很浅，平时时间实在是太碎，所以记忆也很碎，如果有不对的地方，还望大神指点一二。下面主要结合一些我学习python时写的代码片段来总结。首先，贴几个网址，什么？干嘛的？你点点看就知道啦，嘿嘿<br><a href="https://docs.python.org/3.3/index.html" target="_blank" rel="external">https://docs.python.org/3.3/index.html</a><br><a href="https://docs.python.org/3.3/library/" target="_blank" rel="external">https://docs.python.org/3.3/library/</a><br>至于安装什么的，我就不说了。我在windows和linux上都装了，差别不大，主要就是有些标准库的包不适用于Windows平台，个人感觉没多大影响，知道主要语法就行了。<br>我的学习环境：win7+python 3.4.3+subline text 2</p>
</blockquote>
<a id="more"></a>
<h2 id="Hello_World">Hello World</h2><p>接触一门语言，总是看到这句话，很多python教程也是这样，所以我这里也写了一个：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"what is your name?"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Hello,"</span>+name+<span class="string">" !"</span>)</span><br><span class="line">input(<span class="string">"Press &lt;enter&gt;"</span>)</span><br></pre></td></tr></table></figure></p>
<p>python里的<code>print</code>，python3版本已经全部被替换成了<code>print()</code>函数，其格式化输出，类似于C中的<code>printf</code>。一般而言都是换行的，如果不想换行,可以在print后面加上<code>end=&quot;&quot;</code>，我后面的代码里会有</p>
<h2 id="基本数据类型和数据结构">基本数据类型和数据结构</h2><h3 id="基本数据类型">基本数据类型</h3><p>Python的基本数据类型没有java分的那么明确，同时定义变量时是不需要声明的,可以通过type()函数查询数据类型。如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本数据类型</span></span><br><span class="line">a=<span class="number">10</span>         <span class="comment"># int 整数</span></span><br><span class="line">print(<span class="string">"a：%s"</span> % type(a))</span><br><span class="line">a=<span class="number">1.3</span>        <span class="comment"># float 浮点数</span></span><br><span class="line">print(<span class="string">"a：%s"</span> % type(a))</span><br><span class="line">a=<span class="keyword">True</span>       <span class="comment"># 布尔 (True/False)</span></span><br><span class="line">print(<span class="string">"a：%s"</span> % type(a))</span><br><span class="line">a=<span class="string">'Hello!'</span>   <span class="comment"># 字符串</span></span><br><span class="line">print(<span class="string">"a：%s"</span> % type(a))</span><br></pre></td></tr></table></figure></p>
<p>关于字符串其实和java中差不多（其实我感觉string可以看出一种list），这里我主要看了一下切片，一个图一目了然<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串操作</span></span><br><span class="line"><span class="comment">#  +---+---+---+---+---+---+</span></span><br><span class="line"><span class="comment">#  | P | y | t | h | o | n |</span></span><br><span class="line"><span class="comment">#  +---+---+---+---+---+---+</span></span><br><span class="line"><span class="comment">#  0   1   2   3   4   5   6</span></span><br><span class="line"><span class="comment"># -6  -5  -4  -3  -2  -1</span></span><br><span class="line"></span><br><span class="line">wordDemo = <span class="string">"Python"</span></span><br><span class="line">wordDemo = <span class="string">"Python"</span>+<span class="string">" Hello"</span></span><br><span class="line">print(<span class="string">"wordDemo:"</span>+wordDemo[:])</span><br><span class="line">print(<span class="string">"wordDemo[0]:"</span>+wordDemo[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">"wordDemo[5]:"</span>+wordDemo[<span class="number">5</span>])</span><br><span class="line">print(<span class="string">"wordDemo[-1]:"</span>+wordDemo[-<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"wordDemo[-7]:"</span>+wordDemo[-<span class="number">7</span>])</span><br><span class="line">print(<span class="string">"wordDemo[0:2]:"</span>+wordDemo[<span class="number">0</span>:<span class="number">2</span>])  <span class="comment"># characters from position 0 (included) to 2 (excluded)</span></span><br><span class="line">print(<span class="string">"wordDemo[:2]:"</span>+wordDemo[:<span class="number">2</span>])</span><br></pre></td></tr></table></figure></p>
<h3 id="基本数据结构">基本数据结构</h3><p>python常见的基本数据结构和java的差不多，主要有三种：序列（列表List和元组tuple）、映射（字典dict）以及集合（set）。</p>
<ol>
<li><p>python的list和java区别较大，也可以说python的list比较高级，它既可以是数组也可以是链表，是一种有序的集合，可以随时添加和删除其中的元素。定义的时候用<code>[</code>放在元素的开始和结尾。关于数据结构的常见操作无外乎增删改查，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 链表的添加、删除、修改、遍历操作</span></span><br><span class="line">listDemo = [<span class="string">'Apple'</span>, <span class="string">'Banana'</span>, <span class="string">'Orange'</span>]</span><br><span class="line">print(<span class="string">"\nlistDemo:"</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> listDemo:</span><br><span class="line">	print(x, len(x))</span><br><span class="line">print(listDemo)</span><br><span class="line"></span><br><span class="line">listDemo.append(<span class="string">'Watermelon'</span>)</span><br><span class="line">print(<span class="string">"append result:"</span>)</span><br><span class="line">print(listDemo)</span><br><span class="line">listDemo.insert(<span class="number">1</span>, <span class="string">'Peach'</span>)</span><br><span class="line">print(<span class="string">"insert result:"</span>)</span><br><span class="line">print(listDemo)</span><br><span class="line">listDemo.pop() </span><br><span class="line">print(<span class="string">"pop result:"</span>)</span><br><span class="line">print(listDemo)</span><br><span class="line">listDemo.pop(<span class="number">0</span>) </span><br><span class="line">print(<span class="string">"pop(0) result:"</span>)</span><br><span class="line">print(listDemo)</span><br><span class="line">listDemo[<span class="number">1</span>] = <span class="string">"Pear"</span> </span><br><span class="line">print(<span class="string">"update result:"</span>)</span><br><span class="line">print(listDemo)</span><br></pre></td></tr></table></figure>
</li>
<li><p>tuple和list非常类似，但是tuple是不可变的，也没有append()，insert()这样的方法。定义的时候用<code>(</code>放在元素的开始和结尾。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"\ntupleDemo:"</span>,end=<span class="string">""</span>)</span><br><span class="line">tupleDemo = (<span class="number">1</span>,)</span><br><span class="line">print(tupleDemo)</span><br></pre></td></tr></table></figure>
</li>
<li><p>dict和java里的Map很像，也是<key,value>形式。定义的时候用<code>{</code>放在元素的开始和结尾。</key,value></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dict的添加、删除、修改操作</span></span><br><span class="line">print(<span class="string">"\ndict:"</span>)</span><br><span class="line">dict = &#123;<span class="string">'Tom'</span>: <span class="number">95</span>, <span class="string">'Jack'</span>: <span class="number">75</span>, <span class="string">'Alice'</span>: <span class="number">85</span>&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict[<span class="string">"Tony"</span>] = <span class="string">"60"</span></span><br><span class="line">print(dict)</span><br><span class="line">dict.pop(<span class="string">"Bob"</span>)</span><br><span class="line">print(dict)</span><br><span class="line">dict[<span class="string">"Tony"</span>] = <span class="string">"100"</span></span><br><span class="line">print(dict.get(<span class="string">'Tony'</span>))</span><br><span class="line"><span class="comment"># dict的遍历是无序的</span></span><br><span class="line">dict.clear()</span><br><span class="line">dict = &#123;<span class="string">"a"</span> : <span class="string">"Apple"</span>, <span class="string">"b"</span> : <span class="string">"Banana"</span>, <span class="string">"g"</span> : <span class="string">"Grape"</span>, <span class="string">"o"</span> : <span class="string">"Orange"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dict:</span><br><span class="line">    print(<span class="string">"dict[%s] ="</span> % k,dict[k])</span><br><span class="line">print(<span class="string">"\ntupleDemo:"</span>)</span><br><span class="line">tupleDemo = (<span class="number">1</span>,)</span><br><span class="line">print(tupleDemo)</span><br></pre></td></tr></table></figure>
</li>
<li><p>set和java里的Set很像，也是无序和不重复。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set的添删查操作</span></span><br><span class="line">print(<span class="string">"\nset:"</span>)</span><br><span class="line">s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">print(s)</span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line">print(s)</span><br><span class="line">s.remove(<span class="number">4</span>)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="条件语句">条件语句</h2><p>在说条件语句之前，先得说下缩进。python的一个特点就是没有符号将代码块一块一块地分割，而是用缩进来处理的。<br>python以四个空格（注意不要用tab）的缩进来表示代码块的隶属关系。<br><strong>why space而非tab？</strong><br>其实不仅仅是python，个人感觉对于编程来说用space替代tab，不管对于哪种语言来说都是不错的选择，因为代码文件可能会在不同的环境、不同的编辑器下打开，而不同环境和不同编辑器对于space的处理几乎都是一样的，而对于tab的处理却不尽相同，有的解释成空格，有的不会，而且解释成空格的话，有的是4个有的是8个，所以就会导致代码的格式看起来不一致。对于python来说这个问题更加重要，因为缩进对于python来说是语法的一部分，所以将tab弄成space会减少很多麻烦。</p>
<p>python条件语句和函数都是用缩进和<code>：</code>来代表隶属关系的。至于语法还是比较简单的，下面么是我的联系代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 条件和循环Demo1--斐波那契数列</span></span><br><span class="line">print(<span class="string">"Fibonacci:"</span>)</span><br><span class="line">a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a &lt; <span class="number">10</span>:</span><br><span class="line">	print(b)</span><br><span class="line">	a, b = b, a+b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件和循环Demo2--range函数</span></span><br><span class="line">print(<span class="string">"range:"</span>)</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">    sum = sum + x</span><br><span class="line">print(sum)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件和循环Demo3--if elif</span></span><br><span class="line">print(<span class="string">"if else:"</span>)</span><br><span class="line">salary = int(input(<span class="string">"请输入你的工资："</span>))</span><br><span class="line"><span class="keyword">if</span> salary&gt;<span class="number">10000</span>:</span><br><span class="line">	print(<span class="string">"高富帅啊！"</span>)</span><br><span class="line"><span class="keyword">elif</span> salary&gt;<span class="number">5000</span>:</span><br><span class="line">	print(<span class="string">"小资啊！"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	print(<span class="string">"屌丝啊！"</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="函数">函数</h2><p>python的函数定义关键字是def,然后是<code>:</code>、缩进和函数体。函数这块比较复杂的就是函数的传参，包括必选参数、默认参数、可变参数和关键字参数。这一块要讲的东西很多，我就不深入的讲了（也讲不好，误人子弟）。贴下我联系的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前面有一个斐波那契函数，这里定义一个指定边界的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">	a,b = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span>(a &lt; n):</span><br><span class="line">		print(a,end = <span class="string">" "</span>)</span><br><span class="line">		a,b = b,a+b</span><br><span class="line">	print()</span><br><span class="line">fib(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意函数的赋值</span></span><br><span class="line">i = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(arg=i)</span>:</span></span><br><span class="line">	print(arg)</span><br><span class="line">i = <span class="number">6</span></span><br><span class="line">f()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, L=[])</span>:</span></span><br><span class="line">	L.append(a)</span><br><span class="line">	<span class="keyword">return</span> L</span><br><span class="line">print(f(<span class="number">1</span>))</span><br><span class="line">print(f(<span class="number">2</span>))</span><br><span class="line">print(f(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">concat</span><span class="params">(*args, sep=<span class="string">"/"</span>)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> sep.join(args)</span><br><span class="line">concat(<span class="string">"earth"</span>, <span class="string">"mars"</span>, <span class="string">"venus"</span>)</span><br><span class="line">concat(<span class="string">"earth"</span>, <span class="string">"mars"</span>, <span class="string">"venus"</span>, sep=<span class="string">"."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆分</span></span><br><span class="line">args = [<span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line">list(range(*args)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># lambda</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_test</span><span class="params">(n)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">lambda</span> x: x+n</span><br><span class="line">f = lambda_test(<span class="number">100</span>)</span><br><span class="line">f(<span class="number">0</span>)</span><br><span class="line">f(<span class="number">99</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ask_ok</span><span class="params">(prompt, retries=<span class="number">4</span>, complaint=<span class="string">'Yes or no, please!'</span>)</span>:</span></span><br><span class="line">	<span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">		ok = input(prompt)</span><br><span class="line">		<span class="keyword">if</span> ok <span class="keyword">in</span> (<span class="string">'y'</span>, <span class="string">'ye'</span>, <span class="string">'yes'</span>, <span class="string">'yep'</span>):</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">		<span class="keyword">if</span> ok <span class="keyword">in</span> (<span class="string">'n'</span>, <span class="string">'no'</span>, <span class="string">'nop'</span>, <span class="string">'nope'</span>):</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">		retries = retries - <span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span> retries &lt; <span class="number">0</span>:</span><br><span class="line">			<span class="keyword">raise</span> IOError(<span class="string">'次数超出！尝试退出失败！'</span>)</span><br><span class="line">		print(complaint)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受一个必选参数 (prompt) 以及两个可选参数 (retries, complaint)调用</span></span><br><span class="line">ask_ok(<span class="string">'退出吗？'</span>)</span><br></pre></td></tr></table></figure></p>
<p>看篇幅也不长了，今天先写到这吧，哎，时间太碎了~略烦~</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="导语：">导语：</h2><blockquote>
<p>早就听说python的大名了，汗颜的是最近才开始学。囫囵吞枣似的看了下python，看的很浅，平时时间实在是太碎，所以记忆也很碎，如果有不对的地方，还望大神指点一二。下面主要结合一些我学习python时写的代码片段来总结。首先，贴几个网址，什么？干嘛的？你点点看就知道啦，嘿嘿<br><a href="https://docs.python.org/3.3/index.html">https://docs.python.org/3.3/index.html</a><br><a href="https://docs.python.org/3.3/library/">https://docs.python.org/3.3/library/</a><br>至于安装什么的，我就不说了。我在windows和linux上都装了，差别不大，主要就是有些标准库的包不适用于Windows平台，个人感觉没多大影响，知道主要语法就行了。<br>我的学习环境：win7+python 3.4.3+subline text 2</p>
</blockquote>]]>
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>